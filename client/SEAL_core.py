# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")



# Register SwigPyIterator in _SEAL_core:
_SEAL_core.SwigPyIterator_swigregister(SwigPyIterator)

class vectorD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _SEAL_core.vectorD_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _SEAL_core.vectorD___nonzero__(self)

    def __bool__(self) -> "bool":
        return _SEAL_core.vectorD___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _SEAL_core.vectorD___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _SEAL_core.vectorD___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _SEAL_core.vectorD___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _SEAL_core.vectorD___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _SEAL_core.vectorD___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _SEAL_core.vectorD___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _SEAL_core.vectorD___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _SEAL_core.vectorD_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _SEAL_core.vectorD_append(self, x)

    def empty(self) -> "bool":
        return _SEAL_core.vectorD_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _SEAL_core.vectorD_size(self)

    def swap(self, v: "vectorD") -> "void":
        return _SEAL_core.vectorD_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _SEAL_core.vectorD_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _SEAL_core.vectorD_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _SEAL_core.vectorD_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _SEAL_core.vectorD_rend(self)

    def clear(self) -> "void":
        return _SEAL_core.vectorD_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _SEAL_core.vectorD_get_allocator(self)

    def pop_back(self) -> "void":
        return _SEAL_core.vectorD_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _SEAL_core.vectorD_erase(self, *args)

    def __init__(self, *args):
        _SEAL_core.vectorD_swiginit(self, _SEAL_core.new_vectorD(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _SEAL_core.vectorD_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _SEAL_core.vectorD_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _SEAL_core.vectorD_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _SEAL_core.vectorD_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _SEAL_core.vectorD_resize(self, *args)

    def insert(self, *args) -> "void":
        return _SEAL_core.vectorD_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _SEAL_core.vectorD_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _SEAL_core.vectorD_capacity(self)
    __swig_destroy__ = _SEAL_core.delete_vectorD

# Register vectorD in _SEAL_core:
_SEAL_core.vectorD_swigregister(vectorD)


def create_parms_keys(ID: "unsigned int") -> "char *":
    return _SEAL_core.create_parms_keys(ID)

def ret_parms(user_file: "char *") -> "char *":
    return _SEAL_core.ret_parms(user_file)

def enhandle(user_file: "char *", user_data: "vectorD") -> "char *":
    return _SEAL_core.enhandle(user_file, user_data)

def dehandle(user_file: "char *", user_data: "char *") -> "std::vector< double,std::allocator< double > >":
    return _SEAL_core.dehandle(user_file, user_data)


